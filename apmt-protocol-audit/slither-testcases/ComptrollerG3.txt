CToken.redeemFresh(address,uint256,uint256).vars (CToken.sol#616) is a local variable never initialized
ComptrollerG3.borrowAllowed(address,address,uint256).err_scope_0 (ComptrollerG3.sol#368) is a local variable never initialized
CToken._addReservesFresh(uint256).actualAddAmount (CToken.sol#1241) is a local variable never initialized
CToken.repayBorrowFresh(address,address,uint256).vars (CToken.sol#862) is a local variable never initialized
CToken.mintFresh(address,uint256).vars (CToken.sol#509) is a local variable never initialized
CToken.borrowFresh(address,uint256).vars (CToken.sol#753) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
ComptrollerG3._supportMarket(CToken) (ComptrollerG3.sol#997-1015) ignores return value by cToken.isCToken() (ComptrollerG3.sol#1006)
ComptrollerG3.transferComp(address,uint256,uint256) (ComptrollerG3.sol#1247-1257) ignores return value by ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
ComptrollerG3.updateCompSupplyIndex(address).compAccrued (ComptrollerG3.sol#1160) shadows:
	- ComptrollerV3Storage.compAccrued (ComptrollerStorage.sol#128) (state variable)
ComptrollerG3.updateCompBorrowIndex(address,Exponential.Exp).compAccrued (ComptrollerG3.sol#1183) shadows:
	- ComptrollerV3Storage.compAccrued (ComptrollerStorage.sol#128) (state variable)
Exponential.divScalarByExpTruncate(uint256,Exponential.Exp).fraction (Exponential.sol#135) shadows:
	- Exponential.fraction(uint256,uint256) (Exponential.sol#347-349) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
ComptrollerG3.getHypotheticalAccountLiquidityInternal(address,CToken,uint256,uint256) (ComptrollerG3.sol#713-785) has external calls inside a loop: (oErr,vars.cTokenBalance,vars.borrowBalance,vars.exchangeRateMantissa) = asset.getAccountSnapshot(account) (ComptrollerG3.sol#729)
ComptrollerG3.getHypotheticalAccountLiquidityInternal(address,CToken,uint256,uint256) (ComptrollerG3.sol#713-785) has external calls inside a loop: vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (ComptrollerG3.sol#737)
ComptrollerG3.refreshCompSpeeds() (ComptrollerG3.sol#1118-1147) has external calls inside a loop: borrowIndex = Exp(cToken.borrowIndex()) (ComptrollerG3.sol#1123)
ComptrollerG3.refreshCompSpeeds() (ComptrollerG3.sol#1118-1147) has external calls inside a loop: assetPrice = Exp(oracle.getUnderlyingPrice(cToken_scope_1)) (ComptrollerG3.sol#1133)
ComptrollerG3.refreshCompSpeeds() (ComptrollerG3.sol#1118-1147) has external calls inside a loop: interestPerBlock = mul_(Exp(cToken_scope_1.borrowRatePerBlock()),cToken_scope_1.totalBorrows()) (ComptrollerG3.sol#1134)
ComptrollerG3.claimComp(address[],CToken[],bool,bool) (ComptrollerG3.sol#1285-1303) has external calls inside a loop: borrowIndex = Exp(cToken.borrowIndex()) (ComptrollerG3.sol#1290)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in CToken.borrowFresh(address,uint256) (CToken.sol#736-799):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (CToken.sol#738)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (CToken.sol#788)
	- accountBorrows[borrower].interestIndex = borrowIndex (CToken.sol#789)
	- totalBorrows = vars.totalBorrowsNew (CToken.sol#790)
Reentrancy in CToken.mintFresh(address,uint256) (CToken.sol#497-561):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (CToken.sol#499)
	State variables written after the call(s):
	- accountTokens[minter] = vars.accountTokensNew (CToken.sol#551)
	- totalSupply = vars.totalSupplyNew (CToken.sol#550)
Reentrancy in CToken.redeemFresh(address,uint256,uint256) (CToken.sol#613-707):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (CToken.sol#653)
	State variables written after the call(s):
	- accountTokens[redeemer] = vars.accountTokensNew (CToken.sol#697)
Reentrancy in CToken.repayBorrowFresh(address,address,uint256) (CToken.sol#850-916):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CToken.sol#852)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (CToken.sol#905)
	- accountBorrows[borrower].interestIndex = borrowIndex (CToken.sol#906)
	- totalBorrows = vars.totalBorrowsNew (CToken.sol#907)
Reentrancy in CToken.seizeInternal(address,address,address,uint256) (CToken.sol#1045-1091):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (CToken.sol#1047)
	State variables written after the call(s):
	- accountTokens[borrower] = borrowerTokensNew (CToken.sol#1081)
	- accountTokens[liquidator] = liquidatorTokensNew (CToken.sol#1082)
Reentrancy in CToken.transferTokens(address,address,address,uint256) (CToken.sol#68-127):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,tokens) (CToken.sol#70)
	State variables written after the call(s):
	- accountTokens[src] = srcTokensNew (CToken.sol#113)
	- accountTokens[dst] = dstTokensNew (CToken.sol#114)
	- transferAllowances[src][spender] = allowanceNew (CToken.sol#118)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in CToken.borrowFresh(address,uint256) (CToken.sol#736-799):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (CToken.sol#738)
	Event emitted after the call(s):
	- Borrow(borrower,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (CToken.sol#793)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (CToken.sol#762)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.BORROW_CASH_NOT_AVAILABLE) (CToken.sol#750)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.BORROW_COMPTROLLER_REJECTION,allowed) (CToken.sol#740)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (CToken.sol#767)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (CToken.sol#772)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.BORROW_FRESHNESS_CHECK) (CToken.sol#745)
Reentrancy in ComptrollerG3.distributeBorrowerComp(address,address,Exponential.Exp,bool) (ComptrollerG3.sol#1224-1238):
	External calls:
	- compAccrued[borrower] = transferComp(borrower,borrowerAccrued,0) (ComptrollerG3.sol#1235)
		- ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
	- compAccrued[borrower] = transferComp(borrower,borrowerAccrued,compClaimThreshold) (ComptrollerG3.sol#1235)
		- ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
	Event emitted after the call(s):
	- DistributedBorrowerComp(CToken(cToken),borrower,borrowerDelta,borrowIndex.mantissa) (ComptrollerG3.sol#1236)
Reentrancy in ComptrollerG3.distributeSupplierComp(address,address,bool) (ComptrollerG3.sol#1200-1216):
	External calls:
	- compAccrued[supplier] = transferComp(supplier,supplierAccrued,0) (ComptrollerG3.sol#1214)
		- ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
	- compAccrued[supplier] = transferComp(supplier,supplierAccrued,compClaimThreshold) (ComptrollerG3.sol#1214)
		- ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
	Event emitted after the call(s):
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (ComptrollerG3.sol#1215)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (CToken.sol#952-1020):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CToken.sol#954)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER),0) (CToken.sol#971)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK),0) (CToken.sol#966)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO),0) (CToken.sol#976)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_FRESHNESS_CHECK),0) (CToken.sol#961)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,allowed),0) (CToken.sol#956)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX),0) (CToken.sol#981)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (CToken.sol#952-1020):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CToken.sol#954)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CToken.sol#986)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CToken.sol#852)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (CToken.sol#913)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CToken.sol#986)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(TokenErrorReporter.Error(repayBorrowError),FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED),0) (CToken.sol#988)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CToken.sol#986)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (CToken.sol#910)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CToken.sol#986)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (CToken.sol#952-1020):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CToken.sol#954)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CToken.sol#986)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CToken.sol#852)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (CToken.sol#913)
	- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (CToken.sol#1005)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (CToken.sol#1047)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (CToken.sol#1088)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (CToken.sol#1005)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (CToken.sol#1005)
	- Transfer(borrower,liquidator,seizeTokens) (CToken.sol#1085)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (CToken.sol#1005)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (CToken.sol#952-1020):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CToken.sol#954)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CToken.sol#986)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CToken.sol#852)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (CToken.sol#913)
	- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (CToken.sol#1005)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (CToken.sol#1047)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (CToken.sol#1088)
	- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (CToken.sol#1007)
	Event emitted after the call(s):
	- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(cTokenCollateral),seizeTokens) (CToken.sol#1014)
Reentrancy in CToken.liquidateBorrowInternal(address,uint256,CTokenInterface) (CToken.sol#926-941):
	External calls:
	- error = cTokenCollateral.accrueInterest() (CToken.sol#933)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(TokenErrorReporter.Error(error),FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED),0) (CToken.sol#936)
Reentrancy in CToken.liquidateBorrowInternal(address,uint256,CTokenInterface) (CToken.sol#926-941):
	External calls:
	- error = cTokenCollateral.accrueInterest() (CToken.sol#933)
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CToken.sol#940)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CToken.sol#852)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (CToken.sol#1047)
		- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CToken.sol#954)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (CToken.sol#1088)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (CToken.sol#913)
		- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (CToken.sol#1007)
		- comptroller.liquidateBorrowVerify(address(this),address(cTokenCollateral),liquidator,borrower,actualRepayAmount,seizeTokens) (CToken.sol#1017)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CToken.sol#940)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CToken.sol#940)
	- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(cTokenCollateral),seizeTokens) (CToken.sol#1014)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CToken.sol#940)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (CToken.sol#910)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CToken.sol#940)
	- Transfer(borrower,liquidator,seizeTokens) (CToken.sol#1085)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CToken.sol#940)
Reentrancy in CToken.mintFresh(address,uint256) (CToken.sol#497-561):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (CToken.sol#499)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- (failOpaque(Error.MATH_ERROR,FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,uint256(vars.mathErr)),0) (CToken.sol#513)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.MINT_FRESHNESS_CHECK),0) (CToken.sol#506)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.MINT_COMPTROLLER_REJECTION,allowed),0) (CToken.sol#501)
	- Mint(minter,vars.actualMintAmount,vars.mintTokens) (CToken.sol#554)
	- Transfer(address(this),minter,vars.mintTokens) (CToken.sol#555)
Reentrancy in CToken.redeemFresh(address,uint256,uint256) (CToken.sol#613-707):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (CToken.sol#653)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.REDEEM_FRESHNESS_CHECK) (CToken.sol#660)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REDEEM_COMPTROLLER_REJECTION,allowed) (CToken.sol#655)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,uint256(vars.mathErr)) (CToken.sol#670)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE) (CToken.sol#680)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (CToken.sol#675)
	- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (CToken.sol#701)
	- Transfer(redeemer,address(this),vars.redeemTokens) (CToken.sol#700)
Reentrancy in CToken.repayBorrowFresh(address,address,uint256) (CToken.sol#850-916):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CToken.sol#852)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- (failOpaque(Error.MATH_ERROR,FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)),0) (CToken.sol#870)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.REPAY_BORROW_FRESHNESS_CHECK),0) (CToken.sol#859)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,allowed),0) (CToken.sol#854)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (CToken.sol#910)
Reentrancy in ComptrollerG3.seizeAllowed(address,address,address,address,uint256) (ComptrollerG3.sol#538-564):
	External calls:
	- distributeSupplierComp(cTokenCollateral,borrower,false) (ComptrollerG3.sol#560)
		- ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
	- distributeSupplierComp(cTokenCollateral,liquidator,false) (ComptrollerG3.sol#561)
		- ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
	Event emitted after the call(s):
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (ComptrollerG3.sol#1215)
		- distributeSupplierComp(cTokenCollateral,liquidator,false) (ComptrollerG3.sol#561)
Reentrancy in CToken.seizeInternal(address,address,address,uint256) (CToken.sol#1045-1091):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (CToken.sol#1047)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.MATH_ERROR,FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,uint256(mathErr)) (CToken.sol#1073)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,allowed) (CToken.sol#1049)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER) (CToken.sol#1054)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.MATH_ERROR,FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,uint256(mathErr)) (CToken.sol#1068)
	- Transfer(borrower,liquidator,seizeTokens) (CToken.sol#1085)
Reentrancy in ComptrollerG3.transferAllowed(address,address,address,uint256) (ComptrollerG3.sol#601-618):
	External calls:
	- distributeSupplierComp(cToken,src,false) (ComptrollerG3.sol#614)
		- ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
	- distributeSupplierComp(cToken,dst,false) (ComptrollerG3.sol#615)
		- ampt.transfer(user,userAccrued) (ComptrollerG3.sol#1252)
	Event emitted after the call(s):
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (ComptrollerG3.sol#1215)
		- distributeSupplierComp(cToken,dst,false) (ComptrollerG3.sol#615)
Reentrancy in CToken.transferTokens(address,address,address,uint256) (CToken.sol#68-127):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,tokens) (CToken.sol#70)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.BAD_INPUT,FailureInfo.TRANSFER_NOT_ALLOWED) (CToken.sol#77)
	- Failure(uint256(err),uint256(info),opaqueError) (ErrorReporter.sol#203)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.TRANSFER_COMPTROLLER_REJECTION,allowed) (CToken.sol#72)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.MATH_ERROR,FailureInfo.TRANSFER_TOO_MUCH) (CToken.sol#106)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.MATH_ERROR,FailureInfo.TRANSFER_NOT_ENOUGH) (CToken.sol#101)
	- Failure(uint256(err),uint256(info),0) (ErrorReporter.sol#194)
		- fail(Error.MATH_ERROR,FailureInfo.TRANSFER_NOT_ALLOWED) (CToken.sol#96)
	- Transfer(src,dst,tokens) (CToken.sol#122)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
AMPT.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (Governance/AMPT.sol#164-173) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now <= expiry,AMPT::delegateBySig: signature expired) (Governance/AMPT.sol#171)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
AMPT.getChainId() (Governance/AMPT.sol#299-303) uses assembly
	- INLINE ASM (Governance/AMPT.sol#301)
Unitroller.fallback() (Unitroller.sol#135-147) uses assembly
	- INLINE ASM (Unitroller.sol#139-146)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
ComptrollerG3.addToMarketInternal(CToken,address) (ComptrollerG3.sol#137-166) compares to a boolean constant:
	-marketToJoin.accountMembership[borrower] == true (ComptrollerG3.sol#145)
ComptrollerG3._setMintPaused(CToken,bool) (ComptrollerG3.sol#1046-1054) compares to a boolean constant:
	-require(bool,string)(msg.sender == admin || state == true,only admin can unpause) (ComptrollerG3.sol#1049)
ComptrollerG3._setBorrowPaused(CToken,bool) (ComptrollerG3.sol#1056-1064) compares to a boolean constant:
	-require(bool,string)(msg.sender == admin || state == true,only admin can unpause) (ComptrollerG3.sol#1059)
ComptrollerG3._setTransferPaused(bool) (ComptrollerG3.sol#1066-1073) compares to a boolean constant:
	-require(bool,string)(msg.sender == admin || state == true,only admin can unpause) (ComptrollerG3.sol#1068)
ComptrollerG3._setSeizePaused(bool) (ComptrollerG3.sol#1075-1082) compares to a boolean constant:
	-require(bool,string)(msg.sender == admin || state == true,only admin can unpause) (ComptrollerG3.sol#1077)
ComptrollerG3.claimComp(address[],CToken[],bool,bool) (ComptrollerG3.sol#1285-1303) compares to a boolean constant:
	-borrowers == true (ComptrollerG3.sol#1289)
ComptrollerG3.claimComp(address[],CToken[],bool,bool) (ComptrollerG3.sol#1285-1303) compares to a boolean constant:
	-suppliers == true (ComptrollerG3.sol#1296)
ComptrollerG3._addCompMarketInternal(address) (ComptrollerG3.sol#1335-1356) compares to a boolean constant:
	-require(bool,string)(market.isListed == true,comp market is not listed) (ComptrollerG3.sol#1337)
ComptrollerG3._addCompMarketInternal(address) (ComptrollerG3.sol#1335-1356) compares to a boolean constant:
	-require(bool,string)(market.isComped == false,comp market already added) (ComptrollerG3.sol#1338)
ComptrollerG3._dropCompMarket(address) (ComptrollerG3.sol#1362-1372) compares to a boolean constant:
	-require(bool,string)(market.isComped == true,market is not a comp market) (ComptrollerG3.sol#1366)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
Low level call in Unitroller.fallback() (Unitroller.sol#135-147):
	- (success) = comptrollerImplementation.delegatecall(msg.data) (Unitroller.sol#137)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function CToken._setPendingAdmin(address) (CToken.sol#1102-1118) is not in mixedCase
Function CToken._acceptAdmin() (CToken.sol#1125-1145) is not in mixedCase
Function CToken._setComptroller(ComptrollerInterface) (CToken.sol#1152-1169) is not in mixedCase
Function CToken._setReserveFactor(uint256) (CToken.sol#1176-1184) is not in mixedCase
Function CToken._reduceReserves(uint256) (CToken.sol#1283-1291) is not in mixedCase
Function CToken._setInterestRateModel(InterestRateModel) (CToken.sol#1348-1356) is not in mixedCase
Variable CTokenStorage._notEntered (CTokenInterfaces.sol#10) is not in mixedCase
Constant CTokenStorage.borrowRateMaxMantissa (CTokenInterfaces.sol#31) is not in UPPER_CASE_WITH_UNDERSCORES
Constant CTokenStorage.reserveFactorMaxMantissa (CTokenInterfaces.sol#36) is not in UPPER_CASE_WITH_UNDERSCORES
Function CTokenInterface._setPendingAdmin(address) (CTokenInterfaces.sol#235) is not in mixedCase
Function CTokenInterface._acceptAdmin() (CTokenInterfaces.sol#236) is not in mixedCase
Function CTokenInterface._setComptroller(ComptrollerInterface) (CTokenInterfaces.sol#237) is not in mixedCase
Function CTokenInterface._setReserveFactor(uint256) (CTokenInterfaces.sol#238) is not in mixedCase
Function CTokenInterface._reduceReserves(uint256) (CTokenInterfaces.sol#239) is not in mixedCase
Function CTokenInterface._setInterestRateModel(InterestRateModel) (CTokenInterfaces.sol#240) is not in mixedCase
Constant CTokenInterface.isCToken (CTokenInterfaces.sol#123) is not in UPPER_CASE_WITH_UNDERSCORES
Function CErc20Interface._addReserves(uint256) (CTokenInterfaces.sol#265) is not in mixedCase
Function CDelegatorInterface._setImplementation(address,bool,bytes) (CTokenInterfaces.sol#287) is not in mixedCase
Function CDelegateInterface._becomeImplementation(bytes) (CTokenInterfaces.sol#296) is not in mixedCase
Function CDelegateInterface._resignImplementation() (CTokenInterfaces.sol#301) is not in mixedCase
Function ComptrollerG3._setPriceOracle(PriceOracle) (ComptrollerG3.sol#846-862) is not in mixedCase
Function ComptrollerG3._setCloseFactor(uint256) (ComptrollerG3.sol#870-892) is not in mixedCase
Function ComptrollerG3._setCollateralFactor(CToken,uint256) (ComptrollerG3.sol#901-934) is not in mixedCase
Function ComptrollerG3._setMaxAssets(uint256) (ComptrollerG3.sol#942-953) is not in mixedCase
Function ComptrollerG3._setLiquidationIncentive(uint256) (ComptrollerG3.sol#961-989) is not in mixedCase
Function ComptrollerG3._supportMarket(CToken) (ComptrollerG3.sol#997-1015) is not in mixedCase
Function ComptrollerG3._setPauseGuardian(address) (ComptrollerG3.sol#1029-1044) is not in mixedCase
Function ComptrollerG3._setMintPaused(CToken,bool) (ComptrollerG3.sol#1046-1054) is not in mixedCase
Function ComptrollerG3._setBorrowPaused(CToken,bool) (ComptrollerG3.sol#1056-1064) is not in mixedCase
Function ComptrollerG3._setTransferPaused(bool) (ComptrollerG3.sol#1066-1073) is not in mixedCase
Function ComptrollerG3._setSeizePaused(bool) (ComptrollerG3.sol#1075-1082) is not in mixedCase
Function ComptrollerG3._become(Unitroller,uint256,address[],address[]) (ComptrollerG3.sol#1084-1089) is not in mixedCase
Function ComptrollerG3._becomeG3(uint256,address[],address[]) (ComptrollerG3.sol#1091-1104) is not in mixedCase
Function ComptrollerG3._setCompRate(uint256) (ComptrollerG3.sol#1311-1319) is not in mixedCase
Function ComptrollerG3._addCompMarkets(address[]) (ComptrollerG3.sol#1325-1333) is not in mixedCase
Function ComptrollerG3._dropCompMarket(address) (ComptrollerG3.sol#1362-1372) is not in mixedCase
Constant ComptrollerG3.compClaimThreshold (ComptrollerG3.sol#66) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ComptrollerG3.compInitialIndex (ComptrollerG3.sol#69) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ComptrollerG3.closeFactorMinMantissa (ComptrollerG3.sol#72) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ComptrollerG3.closeFactorMaxMantissa (ComptrollerG3.sol#75) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ComptrollerG3.collateralFactorMaxMantissa (ComptrollerG3.sol#78) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ComptrollerG3.liquidationIncentiveMinMantissa (ComptrollerG3.sol#81) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ComptrollerG3.liquidationIncentiveMaxMantissa (ComptrollerG3.sol#84) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ComptrollerInterface.isComptroller (ComptrollerInterface.sol#5) is not in UPPER_CASE_WITH_UNDERSCORES
Variable ComptrollerV2Storage._mintGuardianPaused (ComptrollerStorage.sol#89) is not in mixedCase
Variable ComptrollerV2Storage._borrowGuardianPaused (ComptrollerStorage.sol#90) is not in mixedCase
Constant Exponential.expScale (Exponential.sol#13) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.doubleScale (Exponential.sol#14) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.halfExpScale (Exponential.sol#15) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.mantissaOne (Exponential.sol#16) is not in UPPER_CASE_WITH_UNDERSCORES
Constant AMPT.totalSupply (Governance/AMPT.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InterestRateModel.isInterestRateModel (InterestRateModel.sol#9) is not in UPPER_CASE_WITH_UNDERSCORES
Constant PriceOracle.isPriceOracle (PriceOracle.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES
Function Unitroller._setPendingImplementation(address) (Unitroller.sol#38-51) is not in mixedCase
Function Unitroller._acceptImplementation() (Unitroller.sol#58-76) is not in mixedCase
Function Unitroller._setPendingAdmin(address) (Unitroller.sol#85-101) is not in mixedCase
Function Unitroller._acceptAdmin() (Unitroller.sol#108-128) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformity-to-solidity-naming-conventions
INFO:Detectors:
AMPT.slitherConstructorConstantVariables() (Governance/AMPT.sol#7-304) uses literals with too many digits:
	- totalSupply = 100000000e18 (Governance/AMPT.sol#18)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
Exponential.mantissaOne (Exponential.sol#16) is never used in ComptrollerG3 (ComptrollerG3.sol#16-1394)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables
INFO:Detectors:
CDelegationStorage.implementation (CTokenInterfaces.sol#272) should be constant
CErc20Storage.underlying (CTokenInterfaces.sol#247) should be constant
ComptrollerV2Storage._borrowGuardianPaused (ComptrollerStorage.sol#90) should be constant
ComptrollerV2Storage._mintGuardianPaused (ComptrollerStorage.sol#89) should be constant
ComptrollerV4Storage.borrowCapGuardian (ComptrollerStorage.sol#133) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) should be declared external:
	- CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (CToken.sol#26-57)
_setInterestRateModel(InterestRateModel) should be declared external:
	- CTokenInterface._setInterestRateModel(InterestRateModel) (CTokenInterfaces.sol#240)
	- CToken._setInterestRateModel(InterestRateModel) (CToken.sol#1348-1356)
_setImplementation(address,bool,bytes) should be declared external:
	- CDelegatorInterface._setImplementation(address,bool,bytes) (CTokenInterfaces.sol#287)
_becomeImplementation(bytes) should be declared external:
	- CDelegateInterface._becomeImplementation(bytes) (CTokenInterfaces.sol#296)
_resignImplementation() should be declared external:
	- CDelegateInterface._resignImplementation() (CTokenInterfaces.sol#301)
enterMarkets(address[]) should be declared external:
	- ComptrollerG3.enterMarkets(address[]) (ComptrollerG3.sol#118-129)
getAccountLiquidity(address) should be declared external:
	- ComptrollerG3.getAccountLiquidity(address) (ComptrollerG3.sol#666-670)
getHypotheticalAccountLiquidity(address,address,uint256,uint256) should be declared external:
	- ComptrollerG3.getHypotheticalAccountLiquidity(address,address,uint256,uint256) (ComptrollerG3.sol#692-699)
_setPriceOracle(PriceOracle) should be declared external:
	- ComptrollerG3._setPriceOracle(PriceOracle) (ComptrollerG3.sol#846-862)
_setPauseGuardian(address) should be declared external:
	- ComptrollerG3._setPauseGuardian(address) (ComptrollerG3.sol#1029-1044)
_setMintPaused(CToken,bool) should be declared external:
	- ComptrollerG3._setMintPaused(CToken,bool) (ComptrollerG3.sol#1046-1054)
_setBorrowPaused(CToken,bool) should be declared external:
	- ComptrollerG3._setBorrowPaused(CToken,bool) (ComptrollerG3.sol#1056-1064)
_setTransferPaused(bool) should be declared external:
	- ComptrollerG3._setTransferPaused(bool) (ComptrollerG3.sol#1066-1073)
_setSeizePaused(bool) should be declared external:
	- ComptrollerG3._setSeizePaused(bool) (ComptrollerG3.sol#1075-1082)
_become(Unitroller,uint256,address[],address[]) should be declared external:
	- ComptrollerG3._become(Unitroller,uint256,address[],address[]) (ComptrollerG3.sol#1084-1089)
_becomeG3(uint256,address[],address[]) should be declared external:
	- ComptrollerG3._becomeG3(uint256,address[],address[]) (ComptrollerG3.sol#1091-1104)
claimComp(address) should be declared external:
	- ComptrollerG3.claimComp(address) (ComptrollerG3.sol#1263-1265)
_dropCompMarket(address) should be declared external:
	- ComptrollerG3._dropCompMarket(address) (ComptrollerG3.sol#1362-1372)
getAllMarkets() should be declared external:
	- ComptrollerG3.getAllMarkets() (ComptrollerG3.sol#1379-1381)
delegate(address) should be declared external:
	- AMPT.delegate(address) (Governance/AMPT.sol#151-153)
delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) should be declared external:
	- AMPT.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (Governance/AMPT.sol#164-173)
getPriorVotes(address,uint256) should be declared external:
	- AMPT.getPriorVotes(address,uint256) (Governance/AMPT.sol#192-224)
_setPendingImplementation(address) should be declared external:
	- Unitroller._setPendingImplementation(address) (Unitroller.sol#38-51)
_acceptImplementation() should be declared external:
	- Unitroller._acceptImplementation() (Unitroller.sol#58-76)
_setPendingAdmin(address) should be declared external:
	- Unitroller._setPendingAdmin(address) (Unitroller.sol#85-101)
_acceptAdmin() should be declared external:
	- Unitroller._acceptAdmin() (Unitroller.sol#108-128)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
INFO:Slither:ComptrollerG3.sol analyzed (25 contracts with 46 detectors), 182 result(s) found
INFO:Slither:Use https://crytic.io/ to get access to additional detectors and Github integration
